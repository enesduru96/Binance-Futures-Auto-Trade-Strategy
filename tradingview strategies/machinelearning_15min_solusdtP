//Tested on solustd.p 15m

//@version=5
strategy('Machine Learning: kNN-based Strategy', 'ML-kNN Strategy', overlay=true, max_labels_count=300, format=format.price, precision=2)

//-- Preset Dates
int startdate = timestamp('01 Jan 2000 00:00:00 GMT+10')
int stopdate  = timestamp('31 Dec 2025 23:45:00 GMT+10')

//-- Inputs
StartDate   = input.time  (startdate, 'Start Date')
StopDate    = input.time  (stopdate,  'Stop Date')
Indicator   = input.string('All',     'Indicator',   ['RSI','ROC','CCI','Volume','All'])
ShortWindow = input.int   (14,        'Short Period [1..n]', 1)
LongWindow  = input.int   (28,        'Long Period [2..n]',  2)
BaseK       = input.int   (252,       'Base No. of Neighbours (K) [5..n]', 5)
Filter      = input.bool  (false,     'Volatility Filter')
Bars        = input.int   (300,       'Bar Threshold [2..5000]', 2, 5000)

//-- Constants
var int BUY   = 1
var int SELL  = -1
var int CLEAR = 0

var int k     = math.floor(math.sqrt(BaseK))  // k Value for kNN algo

//-- Variables
var array<float> feature1   = array.new_float(0)  // [0,...,100]
var array<float> feature2   = array.new_float(0)  //    ...
var array<int>   directions = array.new_int(0)    // [-1; +1]

var array<int>   predictions = array.new_int(0)
var float        prediction  = 0.0
var array<int>   bars        = array.new<int>(1, 0) // array used as a container for inter-bar variables

var int          signal      = CLEAR

// Yeni eklenen değişkenler
var int consecutive_losses = 0            // Üst üste zararlı işlemlerin sayısı
var int last_closed_trade_count = 0       // Son kapatılan işlemin sayacı
var bool stop_trading = false             // İşlem yapmayı durdurma bayrağı
var float reference_price = na            // İşlem yapmayı durdurduğumuz zamandaki referans fiyat

//-- Functions
minimax(float x, int p, float min, float max) => 
    float hi = ta.highest(x, p), float lo = ta.lowest(x, p)
    (max - min) * (x - lo)/(hi - lo) + min

cAqua(int g) => g>9?#0080FFff:g>8?#0080FFe5:g>7?#0080FFcc:g>6?#0080FFb2:g>5?#0080FF99:g>4?#0080FF7f:g>3?#0080FF66:g>2?#0080FF4c:g>1?#0080FF33:#00C0FF19

inside_window(float start, float stop) =>  
    time >= start and time <= stop ? true : false

//-- Logic
bool window = inside_window(StartDate, StopDate)

// 3 pairs of predictor indicators, long and short each
float rs = ta.rsi(close,   LongWindow),        rf = ta.rsi(close,   ShortWindow)
float cs = ta.cci(close,   LongWindow),        cf = ta.cci(close,   ShortWindow)
float os = ta.roc(close,   LongWindow),        of = ta.roc(close,   ShortWindow)
float vs = minimax(volume, LongWindow, 0, 99), vf = minimax(volume, ShortWindow, 0, 99)

float f1 = switch Indicator
    'RSI'    => rs 
    'CCI'    => cs 
    'ROC'    => os 
    'Volume' => vs 
    => math.avg(rs, cs, os, vs)

float f2 = switch Indicator
    'RSI'    => rf 
    'CCI'    => cf
    'ROC'    => of
    'Volume' => vf 
    => math.avg(rf, cf, of, vf)

// Classification data, what happens on the next bar
int class_label = int(math.sign(close[1] - close[0]))

// Use particular training period
if window
    array.push(feature1, f1)
    array.push(feature2, f2)
    array.push(directions, class_label)

// Core logic of the algorithm
int   size    = array.size(directions)
float maxdist = -999.0

for i = 0 to size - 1
    float d = math.sqrt(math.pow(f1 - array.get(feature1, i), 2) + math.pow(f2 - array.get(feature2, i), 2))
    if d > maxdist
        maxdist := d
        if array.size(predictions) >= k
            array.shift(predictions)
        array.push(predictions, array.get(directions, i))

// Get the overall prediction of k nearest neighbours
prediction := array.sum(predictions)   

bool filter = Filter ? ta.atr(10) > ta.atr(40) : true

// Trade interpretation
bool long  = prediction > 0 and filter
bool short = prediction < 0 and filter
bool clear = not (long or short)

if array.get(bars, 0) == Bars
    signal := CLEAR
    array.set(bars, 0, 0)
else
    array.set(bars, 0, array.get(bars, 0) + 1)

signal := long ? BUY : short ? SELL : clear ? CLEAR : nz(signal[1])

int  changed         = ta.change(signal)
bool startLongTrade  = changed and signal == BUY 
bool startShortTrade = changed and signal == SELL
bool clear_condition = changed and signal == CLEAR

float maxpos = ta.highest(high, 10)
float minpos = ta.lowest (low,  10)

//-- Visuals
int buy_tone  = int(prediction > 0 ? prediction * 5 : 0)
int sell_tone = int(prediction < 0 ? prediction * 5 : 0)
plotshape(startLongTrade  ? minpos : na, 'Buy',  shape.labelup,   location.belowbar, cAqua(buy_tone),  size=size.small)
plotshape(startShortTrade ? maxpos : na, 'Sell', shape.labeldown, location.abovebar, color.red, size=size.small)
plot(clear_condition      ? close  : na, 'ClearPos', color.yellow, 4, plot.style_cross)

//-- Strategy implementation

bool buy_tone_condition = buy_tone >= 20
bool sell_tone_condition = sell_tone <= -20

float ema100 = ta.ema(close, 100)
float rsi14 = ta.rsi(close, 14)
bool rsi_below_40 = ta.lowest(rsi14, 96) < 42
bool rsi_above_60 = ta.highest(rsi14, 96) > 58

bool no_position = strategy.position_size == 0
bool long_position = strategy.position_size > 0
bool short_position = strategy.position_size < 0

bool buy_signal = startLongTrade and buy_tone_condition and rsi_below_40 and close > ema100
bool short_signal = startShortTrade and sell_tone_condition and rsi_above_60 and close < ema100

buy_signal := buy_signal and not stop_trading
short_signal := short_signal and not stop_trading

if buy_signal
    if short_position
        strategy.close('Short', comment='Reverse to Long')
    strategy.entry('Long', strategy.long)

if long_position
    entry_price = strategy.position_avg_price
    take_profit_price = entry_price * 1.011
    stop_price = entry_price * 0.97
    strategy.exit('Exit Long', 'Long', limit=take_profit_price)

    if close > ema100 and close <= entry_price * 0.95
        strategy.close('Long', comment='Above ema100 but dropped')
    if close < ema100 * 0.985
        strategy.close('Long', comment='Close below ema100')


if short_signal
    if long_position
        strategy.close('Long', comment='Reverse to Short')
    strategy.entry('Short', strategy.short)
    
    entry_price = close
    take_profit_price = entry_price * 0.968
    stop_loss_price = entry_price * 1.015
    
    strategy.exit('Exit Short', 'Short', limit=take_profit_price, stop=stop_loss_price)

if short_position
    entry_price = strategy.position_avg_price
    if close < ema100 and close >= entry_price * 1.02
        strategy.close('Short', comment='Below ema100 but rose')
    if close > ema100 * 1.012
        strategy.close('Short', comment='Close above ema100')


if strategy.closedtrades > last_closed_trade_count
    // Yeni bir işlem kapatıldı
    float last_trade_profit = strategy.closedtrades.profit(strategy.closedtrades - 1)
    if last_trade_profit < 0
        consecutive_losses += 1
    else
        consecutive_losses := 0
    if consecutive_losses >= 3
        stop_trading := true
        reference_price := close
    last_closed_trade_count := strategy.closedtrades

if stop_trading
    if close >= reference_price * 1.02 or close <= reference_price * 0.98
        stop_trading := false
        consecutive_losses := 0
        reference_price := na
